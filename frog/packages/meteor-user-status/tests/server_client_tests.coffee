###
  Manual tests to do:

  logged out -> logged in
  logged in -> logged out
  logged in -> close session -> reopen
  logged in -> connection timeout
###

if Meteor.isServer
  # Publish status to client
  Meteor.publish null, -> Meteor.users.find {},
    fields: { status: 1 }

  Meteor.methods
    "grabStatus": ->
      Meteor.users.find({_id: $ne: TEST_userId}, { fields: { status: 1 }}).fetch()
    "grabSessions": ->
      # Only grab sessinos not generated by server-side tests.
      UserStatus.connections.find({
        $and: [
          {userId: $ne: TEST_userId},
          {ipAddr: $ne: TEST_IP}
        ]
      }).fetch()

if Meteor.isClient

  # The maximum tolerance we expect in client-server tests
  # TODO why must this be so large?
  timeTol = 1000
  loginTime = null
  idleTime = null

  # Monitor tests will wait for timesync, so we don't need to here.
  Tinytest.addAsync "status - login", (test, next) ->
    InsecureLogin.ready ->
      test.ok()
      loginTime = new Date(TimeSync.serverTime())
      next()

  # Check that initialization is empty
  Tinytest.addAsync "status - online recorded on server", (test, next) ->
    Meteor.call "grabStatus", (err, res) ->
      test.isUndefined err
      test.length res, 1

      user = res[0]
      test.equal user._id, Meteor.userId()
      test.equal user.status.online, true

      test.isTrue Math.abs(user.status.lastLogin.date - loginTime) < timeTol

      # TODO: user-agent doesnt' seem to match up in phantomjs for some reason
      unless Package['test-in-console']?
        test.equal user.status.lastLogin.userAgent, navigator.userAgent

      test.equal user.status.idle, false
      test.isFalse user.status.lastActivity?

      next()

  Tinytest.addAsync "status - session recorded on server", (test, next) ->
    Meteor.call "grabSessions", (err, res) ->
      test.isUndefined err
      test.length res, 1

      doc = res[0]
      test.equal doc.userId, Meteor.userId()
      test.isTrue doc.ipAddr?
      test.isTrue Math.abs(doc.loginTime - loginTime) < timeTol

      # This shit doesn't seem to work properly in PhantomJS on Travis
      unless Package['test-in-console']?
        test.equal doc.userAgent, navigator.userAgent

      test.isFalse doc.idle? # connection record, not user
      test.isFalse doc.lastActivity?

      next()

  Tinytest.addAsync "status - online recorded on client", (test, next) ->
    test.equal Meteor.user().status.online, true
    next()

  Tinytest.addAsync "status - idle report to server", (test, next) ->
    now = TimeSync.serverTime()
    idleTime = new Date(now)

    Meteor.call "user-status-idle", now, (err, res) ->
      test.isUndefined err

      # Testing grabStatus should be sufficient to ensure that sessions work
      Meteor.call "grabStatus", (err, res) ->
        test.isUndefined err
        test.length res, 1

        user = res[0]
        test.equal user._id, Meteor.userId()
        test.equal user.status.online, true
        test.equal user.status.idle, true
        test.isTrue user.status.lastLogin?
        # This should be the exact date we sent to the server
        test.equal user.status.lastActivity, idleTime

        next()

  Tinytest.addAsync "status - active report to server", (test, next) ->
    now = TimeSync.serverTime()

    Meteor.call "user-status-active", now, (err, res) ->
      test.isUndefined err

      Meteor.call "grabStatus", (err, res) ->
        test.isUndefined err
        test.length res, 1

        user = res[0]
        test.equal user._id, Meteor.userId()
        test.equal user.status.online, true
        test.isTrue user.status.lastLogin?

        test.equal user.status.idle, false
        test.isFalse user.status.lastActivity?

        next()

  Tinytest.addAsync "status - idle report with no timestamp", (test, next) ->
    now = TimeSync.serverTime()
    idleTime = new Date(now)

    Meteor.call "user-status-idle", undefined, (err, res) ->
      test.isUndefined err

      Meteor.call "grabStatus", (err, res) ->
        test.isUndefined err
        test.length res, 1

        user = res[0]
        test.equal user._id, Meteor.userId()
        test.equal user.status.online, true
        test.equal user.status.idle, true
        test.isTrue user.status.lastLogin?
        # This will be approximate
        test.isTrue Math.abs(user.status.lastActivity - idleTime) < timeTol

        next()

  Tinytest.addAsync "status - active report with no timestamp", (test, next) ->

    Meteor.call "user-status-active", undefined, (err, res) ->
      test.isUndefined err

      Meteor.call "grabStatus", (err, res) ->
        test.isUndefined err
        test.length res, 1

        user = res[0]
        test.equal user._id, Meteor.userId()
        test.equal user.status.online, true
        test.isTrue user.status.lastLogin?

        test.equal user.status.idle, false
        test.isFalse user.status.lastActivity?

        next()

  Tinytest.addAsync "status - logout", (test, next) ->
    Meteor.logout (err) ->
      test.isUndefined err
      next()

  Tinytest.addAsync "status - offline recorded on server", (test, next) ->
    Meteor.call "grabStatus", (err, res) ->
      test.isUndefined err
      test.length res, 1

      user = res[0]
      test.isTrue user._id?
      test.equal user.status.online, false
      # logintime is still maintained
      test.isTrue user.status.lastLogin?

      test.isFalse user.status.idle?
      test.isFalse user.status.lastActivity?

      next()

  Tinytest.addAsync "status - session userId deleted on server", (test, next) ->
    Meteor.call "grabSessions", (err, res) ->
      test.isUndefined err
      test.length res, 1

      doc = res[0]
      test.isFalse doc.userId?
      test.isTrue doc.ipAddr?
      test.isFalse doc.loginTime?

      test.isFalse doc.idle # === false
      test.isFalse doc.lastActivity?

      next()
